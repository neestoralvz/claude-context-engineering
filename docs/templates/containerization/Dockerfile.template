# Dockerfile Template - Context Engineering Standards
# Multi-stage, security-hardened Docker image following 2024-2025 best practices
# syntax=docker/dockerfile:1.4

ARG BASE_IMAGE=python:3.9-slim
ARG BUILD_PLATFORM=$BUILDPLATFORM
ARG TARGET_PLATFORM=$TARGETPLATFORM

#############################################
# Builder Stage - Build tools and dependencies
#############################################
FROM --platform=$BUILD_PLATFORM ${BASE_IMAGE} as builder

# Build metadata
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Build-time optimization environment
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# System dependencies for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create application directory
WORKDIR /app

# Copy dependency files first (better caching)
COPY requirements.txt ./
COPY package*.json ./ 

# Install dependencies with cache mount optimization
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir -r requirements.txt

# Copy application source
COPY . .

# Build application (if needed)
# RUN npm run build  # For Node.js applications
# RUN python setup.py build  # For Python applications

#############################################
# Runtime Stage - Minimal production image
#############################################
FROM ${BASE_IMAGE} as runtime

# Metadata labels (OCI standard)
LABEL org.opencontainers.image.title="{{APP_NAME}}" \
      org.opencontainers.image.description="{{APP_DESCRIPTION}}" \
      org.opencontainers.image.version="${VERSION:-latest}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.source="{{VCS_URL}}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.vendor="Context Engineering" \
      org.opencontainers.image.licenses="{{LICENSE}}" \
      maintainer="{{MAINTAINER_EMAIL}}"

# Runtime environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    APP_ENV=production \
    PORT={{DEFAULT_PORT}}

# Security: Create non-root user
RUN groupadd -r app && \
    useradd --no-log-init -r -g app app && \
    mkdir -p /app /app/data /app/logs && \
    chown -R app:app /app

# Copy Python dependencies from builder
COPY --from=builder /usr/local/lib/python3.9/site-packages/ /usr/local/lib/python3.9/site-packages/
COPY --from=builder /usr/local/bin/ /usr/local/bin/

# Copy application files with proper ownership
COPY --from=builder --chown=app:app /app /app

# Set working directory
WORKDIR /app

# Switch to non-root user for security
USER app

# Health check (required for orchestration)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT}/api/health || exit 1

# Signal handling for graceful shutdown
STOPSIGNAL SIGTERM

# Expose application port
EXPOSE ${PORT}

# Default command
CMD ["python", "{{MAIN_FILE}}"]

#############################################
# Development Stage (optional)
#############################################
FROM runtime as development

# Switch back to root for development tools installation
USER root

# Development dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    vim \
    git \
    && rm -rf /var/lib/apt/lists/*

# Development Python packages
RUN pip install --no-cache-dir \
    pytest \
    black \
    flake8 \
    mypy

# Switch back to app user
USER app

# Development command (with hot reload)
CMD ["python", "{{MAIN_FILE}}", "--debug", "--reload"]

#############################################
# Template Variables to Replace:
# {{APP_NAME}} - Application name
# {{APP_DESCRIPTION}} - Application description  
# {{VCS_URL}} - Version control URL
# {{LICENSE}} - Application license
# {{MAINTAINER_EMAIL}} - Maintainer email
# {{DEFAULT_PORT}} - Default application port
# {{MAIN_FILE}} - Main application file (e.g., main.py, app.py)
#############################################