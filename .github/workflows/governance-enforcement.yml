name: 🛡️ Growth Governance Enforcement

on:
  push:
    branches: [ main, develop, feature/*, fix/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run governance monitoring every 4 hours
    - cron: '0 */4 * * *'
  workflow_dispatch:
    inputs:
      force_remediation:
        description: 'Force automated remediation'
        required: false
        default: 'false'
        type: boolean
      monitoring_level:
        description: 'Monitoring level'
        required: false
        default: 'standard'
        type: choice
        options:
        - minimal
        - standard
        - comprehensive

env:
  GOVERNANCE_AUTO_FIX: ${{ github.event.inputs.force_remediation || 'false' }}
  MONITORING_LEVEL: ${{ github.event.inputs.monitoring_level || 'standard' }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  governance-validation:
    name: 🔍 Governance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      violations-found: ${{ steps.governance-check.outputs.violations-found }}
      system-health: ${{ steps.governance-check.outputs.system-health }}
      compliance-rate: ${{ steps.governance-check.outputs.compliance-rate }}
      
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comprehensive analysis
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sqlite3 bc jq
        
    - name: 🔧 Setup Governance Environment
      run: |
        # Create necessary directories
        mkdir -p scripts/results/governance/{alerts,metrics,backups}
        
        # Install required tools
        sudo apt-get update
        sudo apt-get install -y bc jq sqlite3
        
        # Setup governance configuration
        if [[ ! -f scripts/governance/governance-config.json ]]; then
          echo "Creating default governance configuration"
          cp scripts/governance/governance-config.json.example scripts/governance/governance-config.json 2>/dev/null || true
        fi
        
    - name: 🛡️ Run Governance Engine
      id: governance-check
      run: |
        echo "🔍 Starting governance validation..."
        
        # Run governance monitoring
        python3 scripts/governance/governance-engine.py > governance-output.txt 2>&1 || true
        
        # Parse results
        violations_found=$(grep -c "violation" governance-output.txt || echo "0")
        system_health=$(grep "System Health:" governance-output.txt | grep -oE '[0-9]+\.[0-9]+%' | head -1 || echo "100%")
        compliance_rate=$(grep "compliance rate" governance-output.txt | grep -oE '[0-9]+\.[0-9]+%' | head -1 || echo "100%")
        
        echo "violations-found=$violations_found" >> $GITHUB_OUTPUT
        echo "system-health=$system_health" >> $GITHUB_OUTPUT
        echo "compliance-rate=$compliance_rate" >> $GITHUB_OUTPUT
        
        # Display results
        echo "📊 Governance Results:"
        echo "   Violations Found: $violations_found"
        echo "   System Health: $system_health"
        echo "   Compliance Rate: $compliance_rate"
        
        # Set exit code based on violations
        if [[ "$violations_found" -gt "0" ]] && [[ "${{ env.GOVERNANCE_AUTO_FIX }}" != "true" ]]; then
          echo "❌ Governance violations found and auto-fix disabled"
          exit 1
        fi
        
    - name: 📏 File Size Validation
      run: |
        echo "📏 Checking file sizes..."
        
        # Check for files exceeding 1500 lines
        large_files=()
        while IFS= read -r -d '' file; do
          if [[ "$file" == *.md ]] && [[ -f "$file" ]]; then
            line_count=$(wc -l < "$file" 2>/dev/null || echo 0)
            if (( line_count > 1500 )); then
              large_files+=("$file:$line_count")
              echo "⚠️  Large file: $file ($line_count lines)"
            fi
          fi
        done < <(find . -name "*.md" -type f -print0)
        
        if [[ ${#large_files[@]} -gt 0 ]]; then
          echo "❌ Found ${#large_files[@]} files exceeding 1500 lines"
          if [[ "${{ env.GOVERNANCE_AUTO_FIX }}" != "true" ]]; then
            exit 1
          fi
        else
          echo "✅ All files within size limits"
        fi
        
    - name: 🔍 Duplication Detection
      run: |
        echo "🔍 Checking for content duplication..."
        
        python3 -c "
import os
import re
from pathlib import Path
from itertools import combinations

def calculate_similarity(content1, content2):
    words1 = set(content1.lower().split())
    words2 = set(content2.lower().split())
    
    if not words1 or not words2:
        return 0.0
    
    intersection = words1.intersection(words2)
    union = words1.union(words2)
    
    return len(intersection) / len(union)

# Find all markdown files
md_files = list(Path('.').rglob('*.md'))
violations = 0

for file1, file2 in combinations(md_files, 2):
    try:
        content1 = file1.read_text(encoding='utf-8')
        content2 = file2.read_text(encoding='utf-8')
        
        similarity = calculate_similarity(content1, content2)
        
        if similarity > 0.20:  # 20% threshold
            print(f'⚠️  Duplication: {file1} <-> {file2} ({similarity:.1%} similar)')
            violations += 1
    except Exception as e:
        continue

if violations > 0:
    print(f'❌ Found {violations} duplication violations')
    if '${{ env.GOVERNANCE_AUTO_FIX }}' != 'true':
        exit(1)
else:
    print('✅ No significant duplication detected')
"
        
    - name: ⚠️ Technical Debt Analysis
      run: |
        echo "⚠️  Analyzing technical debt..."
        
        # Count TODO/FIXME items
        total_debt=$(grep -riE '(TODO|FIXME|XXX|HACK|BUG)' --include="*.md" . | wc -l)
        
        echo "📝 Total technical debt items: $total_debt"
        
        if (( total_debt > 19 )); then
          echo "❌ Technical debt exceeds threshold (19 items)"
          if [[ "${{ env.GOVERNANCE_AUTO_FIX }}" != "true" ]]; then
            exit 1
          fi
        else
          echo "✅ Technical debt within acceptable limits"
        fi
        
    - name: 📋 P55/P56 Compliance Check
      run: |
        echo "📋 Checking P55/P56 compliance..."
        
        python3 -c "
import re
from pathlib import Path

yaml_blocks = 0
total_blocks = 0

for md_file in Path('.').rglob('*.md'):
    try:
        content = md_file.read_text(encoding='utf-8')
        yaml_count = len(re.findall(r'```ya?ml\s*\n.*?\n```', content, re.DOTALL))
        total_count = len(re.findall(r'```[a-zA-Z]+\s*\n.*?\n```', content, re.DOTALL))
        
        yaml_blocks += yaml_count
        total_blocks += total_count
    except Exception:
        continue

if total_blocks > 0:
    p55_compliant = total_blocks - yaml_blocks
    compliance_rate = p55_compliant / total_blocks
    print(f'📊 P55/P56 Compliance Rate: {compliance_rate:.1%}')
    
    if compliance_rate < 0.95:  # 95% threshold
        print(f'❌ Compliance below threshold (95%)')
        if '${{ env.GOVERNANCE_AUTO_FIX }}' != 'true':
            exit(1)
    else:
        print('✅ Compliance requirements met')
else:
    print('✅ No code blocks found - 100% compliant')
"
        
    - name: 🔧 Automated Remediation
      if: env.GOVERNANCE_AUTO_FIX == 'true'
      run: |
        echo "🔧 Running automated remediation..."
        
        # Run YAML conversion
        if [[ -f scripts/automation/yaml-to-p55-converter.sh ]]; then
          bash scripts/automation/yaml-to-p55-converter.sh --auto-commit
        fi
        
        # Run governance engine with auto-fix
        python3 scripts/governance/governance-engine.py --auto-fix || true
        
        echo "✅ Automated remediation completed"
        
    - name: 📊 Generate Governance Report
      run: |
        echo "📊 Generating governance report..."
        
        # Create comprehensive report
        report_file="governance-report-$(date +%Y%m%d-%H%M%S).json"
        
        cat > "$report_file" << EOF
{
  "timestamp": "$(date -Iseconds)",
  "workflow_run": "${{ github.run_number }}",
  "commit_sha": "${{ github.sha }}",
  "branch": "${{ github.ref_name }}",
  "event": "${{ github.event_name }}",
  "governance_results": {
    "violations_found": "${{ steps.governance-check.outputs.violations-found }}",
    "system_health": "${{ steps.governance-check.outputs.system-health }}",
    "compliance_rate": "${{ steps.governance-check.outputs.compliance-rate }}",
    "auto_fix_enabled": "${{ env.GOVERNANCE_AUTO_FIX }}"
  },
  "validation_status": "$(if [[ '${{ job.status }}' == 'success' ]]; then echo 'passed'; else echo 'failed'; fi)",
  "monitoring_level": "${{ env.MONITORING_LEVEL }}"
}
EOF
        
        echo "📄 Report generated: $report_file"
        
    - name: 🚨 Upload Governance Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: governance-reports-${{ github.run_number }}
        path: |
          governance-*.json
          governance-output.txt
          scripts/results/governance/
        retention-days: 30
        
  automated-remediation:
    name: 🔧 Automated Remediation
    runs-on: ubuntu-latest
    needs: governance-validation
    if: needs.governance-validation.outputs.violations-found > 0 && github.event.inputs.force_remediation == 'true'
    timeout-minutes: 20
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Run Automated Fixes
      run: |
        echo "🔧 Starting automated remediation..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Run comprehensive automated fixes
        python3 scripts/governance/governance-engine.py --auto-fix --comprehensive
        
        # Run YAML conversion
        if [[ -f scripts/automation/yaml-to-p55-converter.sh ]]; then
          bash scripts/automation/yaml-to-p55-converter.sh --auto-commit
        fi
        
        # Check if changes were made
        if ! git diff --quiet; then
          echo "📝 Committing automated fixes..."
          git add .
          git commit -m "🤖 AUTOMATED: Governance violations remediation

🛡️ Automated fixes applied:
- File size optimization
- Content deduplication
- Technical debt resolution
- P55/P56 compliance improvements

Generated with GitHub Actions Governance Enforcement
Workflow: ${{ github.workflow }}
Run: ${{ github.run_number }}"
          
          git push
          echo "✅ Automated fixes committed and pushed"
        else
          echo "ℹ️  No changes to commit"
        fi
        
  performance-monitoring:
    name: ⚡ Performance Monitoring
    runs-on: ubuntu-latest
    needs: governance-validation
    if: always()
    timeout-minutes: 10
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ⚡ Monitor Performance Metrics
      run: |
        echo "⚡ Monitoring performance metrics..."
        
        # Calculate cognitive steps
        cognitive_steps=$(python3 -c "
import re
from pathlib import Path

claude_md = Path('CLAUDE.md')
if claude_md.exists():
    content = claude_md.read_text()
    headers = len(re.findall(r'^#+\s+', content, re.MULTILINE))
    links = len(re.findall(r'\[.*?\]\(.*?\)', content))
    
    depth_score = headers / 50.0
    complexity_score = links / 100.0
    steps = max(1.0, (depth_score + complexity_score) * 2.5)
    print(f'{steps:.2f}')
else:
    print('3.0')
")
        
        echo "🧠 Cognitive Steps: $cognitive_steps"
        
        # Check navigation efficiency
        if (( $(echo "$cognitive_steps > 2.5" | bc -l) )); then
          echo "⚠️  Navigation efficiency below target (>2.5 steps)"
        else
          echo "✅ Navigation efficiency within target (≤2.5 steps)"
        fi
        
    - name: 📊 Update Performance Dashboard
      run: |
        echo "📊 Updating performance dashboard..."
        
        # Create or update performance metrics
        metrics_file="scripts/results/governance/performance-metrics.json"
        mkdir -p "$(dirname "$metrics_file")"
        
        cat > "$metrics_file" << EOF
{
  "timestamp": "$(date -Iseconds)",
  "cognitive_steps": $cognitive_steps,
  "system_health": "${{ needs.governance-validation.outputs.system-health }}",
  "compliance_rate": "${{ needs.governance-validation.outputs.compliance-rate }}",
  "navigation_efficiency": "$(if (( $(echo "$cognitive_steps <= 2.5" | bc -l) )); then echo "optimal"; else echo "needs_optimization"; fi)",
  "workflow_performance": {
    "validation_duration": "5-15 minutes",
    "remediation_available": true,
    "monitoring_coverage": "100%"
  }
}
EOF
        
        echo "✅ Performance metrics updated"
        
  notification:
    name: 📢 Governance Notifications
    runs-on: ubuntu-latest
    needs: [governance-validation, performance-monitoring]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: 📢 Generate Notification Summary
      run: |
        echo "📢 Generating governance notification summary..."
        
        violations="${{ needs.governance-validation.outputs.violations-found }}"
        health="${{ needs.governance-validation.outputs.system-health }}"
        compliance="${{ needs.governance-validation.outputs.compliance-rate }}"
        
        if [[ "$violations" -gt "0" ]]; then
          status="⚠️ GOVERNANCE ALERT"
          emoji="🚨"
        else
          status="✅ GOVERNANCE OK"
          emoji="🛡️"
        fi
        
        echo "$emoji Governance Status: $status"
        echo "📊 System Health: $health"
        echo "📋 Compliance Rate: $compliance"
        echo "🔍 Violations Found: $violations"
        
        # Create notification payload
        cat > notification.json << EOF
{
  "status": "$status",
  "violations": $violations,
  "system_health": "$health",
  "compliance_rate": "$compliance",
  "workflow": "${{ github.workflow }}",
  "run_number": "${{ github.run_number }}",
  "branch": "${{ github.ref_name }}",
  "timestamp": "$(date -Iseconds)"
}
EOF
        
        echo "📄 Notification generated"
        
    - name: 📤 Upload Notification
      uses: actions/upload-artifact@v4
      with:
        name: governance-notification-${{ github.run_number }}
        path: notification.json
        retention-days: 7