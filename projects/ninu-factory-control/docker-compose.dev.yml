# Docker Compose para desarrollo - Configuración mínima
# Solo lo esencial para desarrollar el frontend de Ninu.mx
# NOTA: Puerto 3001 comentado hasta implementar backend API

services:
  # ================================
  # Frontend Development
  # ================================
  ninu-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: ninu-factory-dev
    ports:
      - "3000:3000"    # Frontend Next.js
      # - "3001:3001"    # API Backend (deshabilitado temporalmente)
    volumes:
      # Hot reload - monta el código fuente
      - .:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080
      - NEXT_PUBLIC_ENV=development
    stdin_open: true
    tty: true
    networks:
      - ninu-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ================================
  # Base de datos de desarrollo
  # ================================
  ninu-dev-db:
    image: postgres:15-alpine
    container_name: ninu-dev-database
    ports:
      - "5433:5432"  # Puerto diferente para no conflictar
    volumes:
      - ninu-dev-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=ninu_factory_dev
      - POSTGRES_USER=dev_user
      - POSTGRES_PASSWORD=dev_password
    networks:
      - ninu-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d ninu_factory_dev"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Redis para desarrollo
  # ================================
  ninu-dev-redis:
    image: redis:7-alpine
    container_name: ninu-dev-redis
    ports:
      - "6380:6379"  # Puerto diferente para no conflictar
    volumes:
      - ninu-dev-redis-data:/data
    networks:
      - ninu-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

# ================================
# Networks para desarrollo
# ================================
networks:
  ninu-dev-network:
    driver: bridge

# ================================
# Volumes para desarrollo
# ================================
volumes:
  ninu-dev-db-data:
    driver: local
  ninu-dev-redis-data:
    driver: local