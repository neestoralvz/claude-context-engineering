# Production Docker Compose for Ninu.mx Factory Control System
# Complete production environment with PostgreSQL, WebSocket, and monitoring

version: '3.8'

services:
  # ================================
  # PostgreSQL Database
  # ================================
  ninu-database:
    image: postgres:15-alpine
    container_name: ninu-database-prod
    ports:
      - "5432:5432"
    volumes:
      - ninu-db-data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/init-data.sql:/docker-entrypoint-initdb.d/02-init-data.sql
    environment:
      - POSTGRES_DB=ninu_factory_control
      - POSTGRES_USER=ninu_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-ninu_secure_password_2024}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    networks:
      - ninu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ninu_user -d ninu_factory_control"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ================================
  # Redis Cache & Session Store
  # ================================
  ninu-redis:
    image: redis:7-alpine
    container_name: ninu-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - ninu-redis-data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    networks:
      - ninu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # ================================
  # Next.js Frontend Application
  # ================================
  ninu-frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: ninu-frontend-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - NEXT_TELEMETRY_DISABLED=1
      - DB_HOST=ninu-database
      - DB_PORT=5432
      - DB_NAME=ninu_factory_control
      - DB_USER=ninu_user
      - DB_PASSWORD=${DB_PASSWORD:-ninu_secure_password_2024}
      - DB_SSL=false
      - REDIS_URL=redis://ninu-redis:6379
      - JWT_SECRET=${JWT_SECRET:-ninu-factory-jwt-secret-key-2024}
      - NEXT_PUBLIC_WEBSOCKET_URL=ws://localhost:3001
    depends_on:
      ninu-database:
        condition: service_healthy
      ninu-redis:
        condition: service_healthy
    networks:
      - ninu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ================================
  # WebSocket Server with Database Integration
  # ================================
  ninu-websocket:
    build:
      context: .
      dockerfile: Dockerfile.websocket
    container_name: ninu-websocket-prod
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - WEBSOCKET_PORT=3001
      - DB_HOST=ninu-database
      - DB_PORT=5432
      - DB_NAME=ninu_factory_control
      - DB_USER=ninu_user
      - DB_PASSWORD=${DB_PASSWORD:-ninu_secure_password_2024}
      - DB_SSL=false
      - REDIS_URL=redis://ninu-redis:6379
    depends_on:
      ninu-database:
        condition: service_healthy
      ninu-redis:
        condition: service_healthy
    networks:
      - ninu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.15'

  # ================================
  # HAProxy Load Balancer
  # ================================
  ninu-haproxy:
    image: haproxy:2.8-alpine
    container_name: ninu-haproxy-prod
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # HAProxy stats
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./haproxy/ssl:/etc/ssl/certs:ro
    depends_on:
      - ninu-frontend
      - ninu-websocket
    networks:
      - ninu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # ================================
  # Prometheus Monitoring
  # ================================
  ninu-prometheus:
    image: prom/prometheus:latest
    container_name: ninu-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ninu-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:9090'
    networks:
      - ninu-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # ================================
  # Grafana Dashboard
  # ================================
  ninu-grafana:
    image: grafana/grafana:latest
    container_name: ninu-grafana-prod
    ports:
      - "3030:3000"
    volumes:
      - ninu-grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-ninu_admin_2024}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    depends_on:
      - ninu-prometheus
    networks:
      - ninu-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # ================================
  # Node Exporter for System Metrics
  # ================================
  ninu-node-exporter:
    image: prom/node-exporter:latest
    container_name: ninu-node-exporter-prod
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - ninu-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # ================================
  # Postgres Exporter for Database Metrics
  # ================================
  ninu-postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: ninu-postgres-exporter-prod
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://ninu_user:${DB_PASSWORD:-ninu_secure_password_2024}@ninu-database:5432/ninu_factory_control?sslmode=disable
    depends_on:
      - ninu-database
    networks:
      - ninu-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # ================================
  # Redis Exporter for Cache Metrics
  # ================================
  ninu-redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: ninu-redis-exporter-prod
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://ninu-redis:6379
    depends_on:
      - ninu-redis
    networks:
      - ninu-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.05'

  # ================================
  # Backup Service
  # ================================
  ninu-backup:
    image: postgres:15-alpine
    container_name: ninu-backup-prod
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    environment:
      - PGHOST=ninu-database
      - PGPORT=5432
      - PGDATABASE=ninu_factory_control
      - PGUSER=ninu_user
      - PGPASSWORD=${DB_PASSWORD:-ninu_secure_password_2024}
      - BACKUP_RETENTION_DAYS=30
    depends_on:
      - ninu-database
    networks:
      - ninu-network
    restart: unless-stopped
    command: |
      sh -c "
        while true; do
          echo 'Starting backup at $(date)'
          /backup.sh
          echo 'Backup completed at $(date)'
          sleep 86400  # Run daily
        done
      "
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

# ================================
# Networks
# ================================
networks:
  ninu-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# ================================
# Volumes
# ================================
volumes:
  ninu-db-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  ninu-redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  ninu-prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  ninu-grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana

# ================================
# Additional Configuration
# ================================
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "3"
    compress: "true"