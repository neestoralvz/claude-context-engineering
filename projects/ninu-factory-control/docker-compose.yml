# Docker Compose para Sistema de Control de Producción Ninu.mx
# Entorno completo de desarrollo y producción

version: '3.8'

services:
  # ================================
  # Frontend - Next.js Application
  # ================================
  ninu-frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: ninu-frontend
    ports:
      - "3002:3000"
    volumes:
      # Hot reload para desarrollo
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3000
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_WS_URL=ws://localhost:8081
    depends_on:
      - ninu-database
      - ninu-redis
    networks:
      - ninu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ================================
  # Backend API (Future)
  # ================================
  ninu-api:
    image: node:18-alpine
    container_name: ninu-api
    working_dir: /app
    ports:
      - "3001:3001"
    volumes:
      - ./server:/app
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://ninu_user:ninu_password@ninu-database:5432/ninu_factory
      - REDIS_URL=redis://ninu-redis:6379
      - JWT_SECRET=ninu-factory-jwt-secret-key-2024
    command: sh -c "npm install && npm run dev"
    depends_on:
      - ninu-database
      - ninu-redis
    networks:
      - ninu-network
    restart: unless-stopped

  # ================================
  # WebSocket Server (Future)
  # ================================
  ninu-websocket:
    image: node:18-alpine
    container_name: ninu-websocket
    working_dir: /app
    ports:
      - "8081:8080"
    volumes:
      - ./websocket:/app
    environment:
      - NODE_ENV=development
      - WS_PORT=8080
      - REDIS_URL=redis://ninu-redis:6379
    command: sh -c "npm install && npm start"
    depends_on:
      - ninu-redis
    networks:
      - ninu-network
    restart: unless-stopped

  # ================================
  # PostgreSQL Database
  # ================================
  ninu-database:
    image: postgres:15-alpine
    container_name: ninu-database
    ports:
      - "5434:5432"
    volumes:
      - ninu-db-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=ninu_factory
      - POSTGRES_USER=ninu_user
      - POSTGRES_PASSWORD=ninu_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    networks:
      - ninu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ninu_user -d ninu_factory"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ================================
  # Redis Cache
  # ================================
  ninu-redis:
    image: redis:7-alpine
    container_name: ninu-redis
    ports:
      - "6381:6379"
    volumes:
      - ninu-redis-data:/data
    command: redis-server --appendonly yes --appendfsync everysec
    networks:
      - ninu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Nginx Reverse Proxy
  # ================================
  ninu-nginx:
    image: nginx:alpine
    container_name: ninu-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - ninu-frontend
      - ninu-api
    networks:
      - ninu-network
    restart: unless-stopped

  # ================================
  # Monitoring - Prometheus
  # ================================
  ninu-prometheus:
    image: prom/prometheus:latest
    container_name: ninu-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ninu-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ninu-network
    restart: unless-stopped

  # ================================
  # Monitoring - Grafana
  # ================================
  ninu-grafana:
    image: grafana/grafana:latest
    container_name: ninu-grafana
    ports:
      - "3030:3000"
    volumes:
      - ninu-grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=ninu_admin_2024
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - ninu-prometheus
    networks:
      - ninu-network
    restart: unless-stopped

# ================================
# Networks
# ================================
networks:
  ninu-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# Volumes
# ================================
volumes:
  ninu-db-data:
    driver: local
  ninu-redis-data:
    driver: local
  ninu-prometheus-data:
    driver: local
  ninu-grafana-data:
    driver: local