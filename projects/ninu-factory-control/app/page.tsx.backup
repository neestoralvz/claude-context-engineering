'use client'

import { Suspense, useState, useEffect } from 'react'
import { ReactorGrid } from '../components/reactors/ReactorGrid'
import { StationGrid } from '../components/stations/StationGrid'
import { MetricsOverview } from '../components/dashboard/MetricsOverview'
import { 
  ErrorBoundary, 
  MetricsErrorBoundary, 
  ReactorErrorBoundary, 
  StationErrorBoundary 
} from '../components/dashboard/ErrorBoundary'
import { 
  DashboardLoadingState, 
  MetricsOverviewSkeleton,
  ReactorCardSkeleton,
  StationCardSkeleton,
  ConnectionStatus
} from '../components/dashboard/LoadingStates'
import { mockReactors, mockStations, mockMetrics, ninuContactInfo } from '../lib/mock-data'
import Link from 'next/link'
import { Package, Factory, BarChart3, ShoppingBag } from 'lucide-react'

export default function HomePage() {
  const [isLoading, setIsLoading] = useState(true)
  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'connecting' | 'disconnected'>('connecting')

  // Simulate initial loading
  useEffect(() => {
    const loadTimer = setTimeout(() => {
      setIsLoading(false)
      setConnectionStatus('connected')
    }, 1500)

    // Simulate connection status changes
    const connectionTimer = setInterval(() => {
      setConnectionStatus(prev => {
        if (prev === 'connected') return Math.random() > 0.9 ? 'connecting' : 'connected'
        if (prev === 'connecting') return Math.random() > 0.7 ? 'connected' : 'connecting'
        return 'connecting'
      })
    }, 5000)

    return () => {
      clearTimeout(loadTimer)
      clearInterval(connectionTimer)
    }
  }, [])

  // Show full page loading state initially
  if (isLoading) {
    return <DashboardLoadingState />
  }

  return (
    <ErrorBoundary>
      <div className="space-y-8">
        {/* Welcome Section con branding Ninu.mx */}
        <div className="gradient-ninu text-white rounded-lg p-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold mb-2">
                Control de Producción {ninuContactInfo.brand}
              </h1>
              <p className="text-blue-100 text-lg">
                Monitoreo en tiempo real • 3 reactores • 5 estaciones de producción
              </p>
              <p className="text-blue-200 mt-2">
                {ninuContactInfo.slogan} • Productos con registro COFEPRIS
              </p>
              <div className="mt-3">
                <ConnectionStatus 
                  isConnected={connectionStatus === 'connected'} 
                  isLoading={connectionStatus === 'connecting'} 
                />
              </div>
            </div>
            <div className="hidden md:flex flex-col items-center space-y-2">
              <Factory className="h-16 w-16 text-white opacity-80" />
              <span className="text-sm text-blue-200">Factory Control</span>
            </div>
          </div>
        </div>

      {/* Navegación rápida */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Link 
          href="/productos" 
          className="bg-white rounded-lg border border-gray-200 p-6 hover:shadow-md transition-shadow group"
        >
          <div className="flex items-center space-x-4">
            <div className="bg-ninu-secondary/10 p-3 rounded-lg">
              <Package className="h-6 w-6 text-ninu-secondary" />
            </div>
            <div>
              <h3 className="font-semibold text-ninu-primary group-hover:text-ninu-secondary transition-colors">
                Catálogo de Productos
              </h3>
              <p className="text-gray-600 text-sm">8 productos disponibles</p>
            </div>
          </div>
        </Link>

        <Link 
          href="/admin/productos" 
          className="bg-white rounded-lg border border-gray-200 p-6 hover:shadow-md transition-shadow group"
        >
          <div className="flex items-center space-x-4">
            <div className="bg-ninu-primary/10 p-3 rounded-lg">
              <ShoppingBag className="h-6 w-6 text-ninu-primary" />
            </div>
            <div>
              <h3 className="font-semibold text-ninu-primary group-hover:text-ninu-secondary transition-colors">
                Gestión de Productos
              </h3>
              <p className="text-gray-600 text-sm">Administración completa</p>
            </div>
          </div>
        </Link>

        <div className="bg-white rounded-lg border border-gray-200 p-6">
          <div className="flex items-center space-x-4">
            <div className="bg-green-100 p-3 rounded-lg">
              <BarChart3 className="h-6 w-6 text-green-600" />
            </div>
            <div>
              <h3 className="font-semibold text-ninu-primary">
                Sistema Operativo
              </h3>
              <p className="text-green-600 text-sm font-medium">100% Activo</p>
            </div>
          </div>
        </div>
      </div>

        {/* Production Metrics */}
        <MetricsErrorBoundary>
          <Suspense fallback={<MetricsOverviewSkeleton />}>
            <MetricsOverview metrics={mockMetrics} />
          </Suspense>
        </MetricsErrorBoundary>

        {/* Reactors Section */}
        <section>
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-ninu-primary">
              Reactores de Mezcla
            </h2>
            <div className="flex items-center space-x-2 text-ninu-secondary">
              <Factory className="h-5 w-5" />
              <span className="text-sm font-medium">3 Reactores Activos</span>
            </div>
          </div>
          <ReactorErrorBoundary>
            <Suspense fallback={
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {Array.from({ length: 3 }).map((_, index) => (
                  <ReactorCardSkeleton key={index} />
                ))}
              </div>
            }>
              <ReactorGrid 
                reactors={mockReactors}
                onReactorClick={(reactor) => {
                  console.log('Reactor clicked:', reactor.name)
                }}
              />
            </Suspense>
          </ReactorErrorBoundary>
        </section>

        {/* Stations Section */}
        <section>
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-ninu-primary">
              Estaciones de Producción
            </h2>
            <div className="flex items-center space-x-2 text-ninu-secondary">
              <Package className="h-5 w-5" />
              <span className="text-sm font-medium">5 Estaciones</span>
            </div>
          </div>
          <StationErrorBoundary>
            <Suspense fallback={
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-2 gap-6">
                {Array.from({ length: 5 }).map((_, index) => (
                  <StationCardSkeleton key={index} />
                ))}
              </div>
            }>
              <StationGrid 
                stations={mockStations}
                onStationClick={(station) => {
                  console.log('Station clicked:', station.name)
                }}
              />
            </Suspense>
          </StationErrorBoundary>
        </section>

        {/* Información adicional */}
        <div className="bg-gray-50 rounded-lg p-6">
          <div className="text-center">
            <h3 className="text-lg font-semibold text-ninu-primary mb-2">
              {ninuContactInfo.company}
            </h3>
            <p className="text-gray-600 text-sm">
              Sistema de control de producción desarrollado para garantizar la calidad 
              y trazabilidad de todos los productos {ninuContactInfo.brand}
            </p>
            <p className="text-gray-500 text-xs mt-2">
              {ninuContactInfo.location} • Productos con registro COFEPRIS
            </p>
          </div>
        </div>
      </div>
    </ErrorBoundary>
  )
}