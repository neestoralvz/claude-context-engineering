# HAProxy Configuration for Ninu.mx Factory Control System
# Production load balancer with SSL termination and health checks

global
    # Security and performance settings
    daemon
    user haproxy
    group haproxy
    
    # Connection limits
    maxconn 4096
    
    # SSL/TLS settings
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11
    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    
    # Logging
    log stdout local0
    
    # Statistics
    stats socket /var/run/haproxy.sock mode 660 level admin
    stats timeout 30s

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option redispatch
    retries 3
    
    # Security headers
    option httpchk GET /api/health
    http-check expect status 200
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json

# ================================
# Frontend Configuration
# ================================

# HTTP Frontend (redirect to HTTPS)
frontend http-frontend
    bind *:80
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Health check endpoint
    acl is_health_check path_beg /health
    use_backend health-backend if is_health_check
    
    # Redirect HTTP to HTTPS
    redirect scheme https if !{ ssl_fc }

# HTTPS Frontend
frontend https-frontend
    bind *:443 ssl crt /etc/ssl/certs/ninu.pem
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    
    # Route based on path
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_api path_beg /api
    acl is_health_check path_beg /health
    acl is_monitoring path_beg /monitoring
    acl is_grafana path_beg /grafana
    acl is_prometheus path_beg /prometheus
    
    # Backend selection
    use_backend websocket-backend if is_websocket
    use_backend api-backend if is_api
    use_backend health-backend if is_health_check
    use_backend grafana-backend if is_grafana
    use_backend prometheus-backend if is_prometheus
    default_backend web-backend

# Statistics Frontend
frontend stats-frontend
    bind *:8080
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:ninu_admin_2024

# ================================
# Backend Configuration
# ================================

# Main Web Application Backend
backend web-backend
    balance roundrobin
    option httpchk GET /api/health
    
    # Sticky sessions for WebSocket connections
    cookie SERVERID insert indirect nocache
    
    server web1 ninu-frontend:3000 check cookie web1 maxconn 100
    # Add more web servers as needed
    # server web2 ninu-frontend-2:3000 check cookie web2 maxconn 100

# WebSocket Backend
backend websocket-backend
    balance source
    option httpchk GET /health
    
    # WebSocket specific settings
    timeout tunnel 3600s
    timeout server 3600s
    
    server ws1 ninu-websocket:3001 check maxconn 1000
    # Add more WebSocket servers as needed
    # server ws2 ninu-websocket-2:3001 check maxconn 1000

# API Backend
backend api-backend
    balance roundrobin
    option httpchk GET /health
    
    server api1 ninu-frontend:3000 check maxconn 100
    # If you have separate API servers:
    # server api1 ninu-api:3001 check maxconn 100

# Health Check Backend
backend health-backend
    balance roundrobin
    option httpchk GET /health
    
    server health1 ninu-frontend:3000 check maxconn 10

# Grafana Backend
backend grafana-backend
    balance roundrobin
    option httpchk GET /api/health
    
    # Rewrite path for Grafana
    http-request set-path %[path,regsub(^/grafana/?,/)]
    
    server grafana1 ninu-grafana:3000 check maxconn 50

# Prometheus Backend
backend prometheus-backend
    balance roundrobin
    option httpchk GET /-/healthy
    
    # Rewrite path for Prometheus
    http-request set-path %[path,regsub(^/prometheus/?,/)]
    
    server prometheus1 ninu-prometheus:9090 check maxconn 50

# ================================
# Advanced Configuration
# ================================

# Rate limiting
frontend rate-limit
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/ninu.pem
    
    # Rate limit by IP
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # Rate limit by session
    stick-table type string len 32 size 100k expire 30s store http_req_rate(10s)
    http-request track-sc1 base32+src
    http-request deny if { sc_http_req_rate(1) gt 50 }

# Error pages
errorfile 400 /etc/haproxy/errors/400.http
errorfile 403 /etc/haproxy/errors/403.http
errorfile 408 /etc/haproxy/errors/408.http
errorfile 500 /etc/haproxy/errors/500.http
errorfile 502 /etc/haproxy/errors/502.http
errorfile 503 /etc/haproxy/errors/503.http
errorfile 504 /etc/haproxy/errors/504.http

# ================================
# Monitoring and Logging
# ================================

# Custom log format
capture request header Host len 32
capture request header User-Agent len 64
capture request header X-Forwarded-For len 32
capture response header Content-Type len 32